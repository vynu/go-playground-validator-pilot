{
  "service_name": "Stripe",
  "data_type": "webhook",
  "event_type": "payment",
  "main_struct_name": "StripeWebhookPayload",
  "model_type_name": "stripe",
  "validator_var": "sv",
  "provider_name": "stripe_validator",
  "endpoint_path": "stripe",
  "var_name": "stripe",
  "valid_types": "payment invoice subscription customer",
  "field_count": 25,
  "rule_count": 20,
  "version": "1.0.0",
  "author": "Validation Team",
  "description": "Stripe webhook payload validation with comprehensive business rules and security checks",
  "tags": ["payment", "webhook", "stripe", "financial"],
  "example_id": "evt_1234567890abcdef",
  "example_type": "payment.succeeded",
  "example_source": "https://api.stripe.com",
  "example_tag": "production",
  "custom_fields": [
    {
      "name": "EventType",
      "type": "string",
      "json_tag": "event_type",
      "validation_rules": "required,oneof=payment.succeeded payment.failed invoice.created customer.created"
    },
    {
      "name": "Amount",
      "type": "int64",
      "json_tag": "amount",
      "validation_rules": "required,gte=0"
    },
    {
      "name": "Currency",
      "type": "string",
      "json_tag": "currency",
      "validation_rules": "required,iso4217"
    },
    {
      "name": "CustomerID",
      "type": "string",
      "json_tag": "customer_id",
      "validation_rules": "omitempty,stripe_customer_id"
    },
    {
      "name": "PaymentMethodID",
      "type": "string",
      "json_tag": "payment_method_id",
      "validation_rules": "omitempty,stripe_payment_method_id"
    }
  ],
  "additional_structs": [
    {
      "name": "StripePaymentMethod",
      "description": "Stripe payment method information",
      "fields": [
        {
          "name": "ID",
          "type": "string",
          "json_tag": "id",
          "validation_rules": "required,stripe_payment_method_id"
        },
        {
          "name": "Type",
          "type": "string",
          "json_tag": "type",
          "validation_rules": "required,oneof=card bank_account"
        },
        {
          "name": "Last4",
          "type": "string",
          "json_tag": "last4",
          "validation_rules": "omitempty,len=4,numeric"
        }
      ]
    }
  ],
  "custom_validators": [
    {
      "tag": "stripe_customer_id",
      "function_name": "validateStripeCustomerID",
      "description": "Stripe customer ID format validation",
      "validation_logic": "if len(value) == 0 || !strings.HasPrefix(value, \"cus_\") { return false }",
      "return_condition": "len(value) >= 4 && strings.HasPrefix(value, \"cus_\")",
      "error_message": "must be a valid Stripe customer ID (cus_xxxxx)",
      "example": "cus_1234567890abcdef",
      "pattern": "^cus_[a-zA-Z0-9]+$"
    },
    {
      "tag": "stripe_payment_method_id",
      "function_name": "validateStripePaymentMethodID",
      "description": "Stripe payment method ID format validation",
      "validation_logic": "if len(value) == 0 || !strings.HasPrefix(value, \"pm_\") { return false }",
      "return_condition": "len(value) >= 3 && strings.HasPrefix(value, \"pm_\")",
      "error_message": "must be a valid Stripe payment method ID (pm_xxxxx)",
      "example": "pm_1234567890abcdef",
      "pattern": "^pm_[a-zA-Z0-9]+$"
    },
    {
      "tag": "iso4217",
      "function_name": "validateISO4217Currency",
      "description": "ISO 4217 currency code validation",
      "validation_logic": "currencyCode := strings.ToUpper(value)\nvalidCurrencies := []string{\"USD\", \"EUR\", \"GBP\", \"JPY\", \"CAD\", \"AUD\"}\nfor _, valid := range validCurrencies { if currencyCode == valid { return true } }",
      "return_condition": "len(value) == 3 && isValidCurrency(strings.ToUpper(value))",
      "error_message": "must be a valid ISO 4217 currency code",
      "example": "USD",
      "pattern": "^[A-Z]{3}$"
    }
  ],
  "business_logic_checks": [
    {
      "function_name": "checkPaymentAmounts",
      "description": "checks for suspicious payment amounts and patterns",
      "implementation": "// Check for very large amounts\nif payload.Amount > 100000000 { // $1,000,000\n\twarnings = append(warnings, models.ValidationWarning{\n\t\tField: \"Amount\",\n\t\tMessage: fmt.Sprintf(\"Very large payment amount: %d\", payload.Amount),\n\t\tCode: \"LARGE_AMOUNT\",\n\t\tValue: payload.Amount,\n\t\tSuggestion: \"Verify large payment amounts for fraud prevention\",\n\t\tCategory: \"security\",\n\t})\n}\n\n// Check for zero amounts on non-setup events\nif payload.Amount == 0 && !strings.Contains(payload.EventType, \"setup\") {\n\twarnings = append(warnings, models.ValidationWarning{\n\t\tField: \"Amount\",\n\t\tMessage: \"Zero amount payment detected\",\n\t\tCode: \"ZERO_AMOUNT\",\n\t\tSuggestion: \"Review zero amount payments for business logic correctness\",\n\t\tCategory: \"business-logic\",\n\t})\n}"
    },
    {
      "function_name": "checkTestModePatterns",
      "description": "checks for test mode indicators and development patterns",
      "implementation": "// Check for test mode indicators\nif strings.Contains(strings.ToLower(payload.CustomerID), \"test\") || strings.Contains(payload.CustomerID, \"cus_00000000000000\") {\n\twarnings = append(warnings, models.ValidationWarning{\n\t\tField: \"CustomerID\",\n\t\tMessage: \"Test customer ID detected\",\n\t\tCode: \"TEST_CUSTOMER\",\n\t\tSuggestion: \"Ensure test transactions are not processed in production\",\n\t\tCategory: \"environment\",\n\t})\n}"
    }
  ],
  "validation_rules_doc": [
    {
      "field": "EventType",
      "description": "Must be a valid Stripe event type",
      "validation_rule": "required,oneof=payment.succeeded payment.failed invoice.created customer.created",
      "required": true,
      "example": "payment.succeeded"
    },
    {
      "field": "Amount",
      "description": "Payment amount in smallest currency unit (cents)",
      "validation_rule": "required,gte=0",
      "required": true,
      "example": "2000"
    },
    {
      "field": "Currency",
      "description": "ISO 4217 currency code",
      "validation_rule": "required,iso4217",
      "required": true,
      "example": "USD"
    }
  ],
  "business_logic_doc": [
    {
      "name": "Large Amount Detection",
      "description": "Detects payments with unusually large amounts",
      "category": "security",
      "severity": "warning",
      "triggers": "Amount > $1,000,000",
      "recommendation": "Verify large payments for fraud prevention"
    },
    {
      "name": "Test Mode Detection",
      "description": "Identifies test transactions in production",
      "category": "environment",
      "severity": "warning",
      "triggers": "Test customer IDs or test card patterns",
      "recommendation": "Ensure test data doesn't reach production systems"
    }
  ],
  "custom_validators_doc": [
    {
      "tag": "stripe_customer_id",
      "description": "Validates Stripe customer ID format",
      "parameter": "none",
      "example": "validate:\"stripe_customer_id\""
    },
    {
      "tag": "iso4217",
      "description": "Validates ISO 4217 currency codes",
      "parameter": "none",
      "example": "validate:\"iso4217\""
    }
  ],
  "example_business_logic": [
    {
      "name": "Currency Validation",
      "description": "Validates currency codes against supported currencies",
      "function_name": "checkSupportedCurrencies",
      "example_implementation": "supportedCurrencies := []string{\"USD\", \"EUR\", \"GBP\"}\nif !contains(supportedCurrencies, payload.Currency) {\n\twarnings = append(warnings, models.ValidationWarning{\n\t\tField: \"Currency\",\n\t\tMessage: \"Unsupported currency\",\n\t\tCode: \"UNSUPPORTED_CURRENCY\",\n\t\tCategory: \"business-logic\",\n\t})\n}"
    }
  ],
  "example_fields": [
    {
      "field": "event_type",
      "value": "payment.succeeded"
    },
    {
      "field": "amount",
      "value": "2000"
    },
    {
      "field": "currency",
      "value": "USD"
    }
  ],
  "example_payload": [
    {
      "field": "ID",
      "value": "\"evt_1234567890abcdef\""
    },
    {
      "field": "Type",
      "value": "\"payment\""
    },
    {
      "field": "EventType",
      "value": "\"payment.succeeded\""
    },
    {
      "field": "Amount",
      "value": "2000"
    },
    {
      "field": "Currency",
      "value": "\"USD\""
    }
  ],
  "valid_test_payload": [
    {
      "field": "ID",
      "value": "\"evt_valid_test\""
    },
    {
      "field": "Type",
      "value": "\"payment\""
    },
    {
      "field": "EventType",
      "value": "\"payment.succeeded\""
    },
    {
      "field": "Amount",
      "value": "1500"
    },
    {
      "field": "Currency",
      "value": "\"USD\""
    }
  ],
  "invalid_test_payload": [
    {
      "field": "ID",
      "value": "\"\""
    },
    {
      "field": "Type",
      "value": "\"invalid_type\""
    }
  ],
  "example_api_payload": [
    {
      "field": "event_type",
      "value": "\"payment.succeeded\""
    },
    {
      "field": "amount",
      "value": "2000"
    },
    {
      "field": "currency",
      "value": "\"USD\""
    }
  ],
  "example_curl_payload": [
    {
      "field": "event_type",
      "value": "\"payment.succeeded\""
    },
    {
      "field": "amount",
      "value": "2000"
    }
  ],
  "examples": [
    "\"examples/stripe_valid.json\"",
    "\"examples/stripe_invalid.json\""
  ]
}